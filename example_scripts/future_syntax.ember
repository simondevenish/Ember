//
// future_syntax.ember
//
// One of our main objectives with this new syntax is:
//  1. Reduce the amount of typing required — quickly build things, less boilerplate.
//  2. Less text to read — easier scanning once the syntax is familiar.
//  3. Simplicity over complexity — fewer redundant lines, trusting the programmer's logic.
//  4. No more conventional do/while/for/foreach — we have naked & covered iterators.
//
// NOTE: We’re now making all free-standing functions consistently defined as:
//       myFunctionName: fn() {...}
//
// Additionally, we show usage of `var`, `let`, or omitted keywords for variables,
// though recommended is `var myVar: <value>` or `let myConst: <value>`.


// -----------------------------------------------------------------------------
// 1) Import a module and declare a module namespace (indentation style)
// -----------------------------------------------------------------------------
use "network.ember"

module epicAdventure:
  var START_GOLD: 10


// -----------------------------------------------------------------------------
// 2) Demonstrate creation vs. assignment
//    Using colon (':') for creation with initial value
// -----------------------------------------------------------------------------
var isGameRunning: true   // Created with ':', initially true

// You can also omit `var` or `let`; it defaults to var. 
// But we recommend `var foo: 0` for clarity.
foo: 0

// Another example: (We can also do "var foo: 0" or "let foo: 0".)
var sampleNum: 42

// Show a small function defined with indentation-based body:
showGameState: fn()
  if isGameRunning
    print("Game is running!")
  el
    print("Game is stopped...")

// And a function using braces, but still defined as `toggleGameRunning: fn()`
toggleGameRunning: fn() {
  isGameRunning = !isGameRunning
  print("Toggled isGameRunning => " + isGameRunning)
}

print("Initial game state => isGameRunning=" + isGameRunning)
showGameState()

toggleGameRunning()
showGameState()


// -----------------------------------------------------------------------------
// Additional global variables for our event example
// -----------------------------------------------------------------------------
var isNightTime: false
var monsterCount: 2


// -----------------------------------------------------------------------------
// 3) Some small example objects (tables) that we'll mix in or reassign
//    (Indentation-based table syntax)
// -----------------------------------------------------------------------------
var MagicalBeing = {
  castSpell: fn(spell)
    print(this.name + " casts " + spell + "!")
}


var InventorySystem = {
  checkInventory: fn()
    print(this.name + " has => " + this.inventory)
}


// Another object that might replace an existing mixin
var Explorer = {
  explore: fn()
    print(this.name + " explores the unknown lands!")
}


// A new table that might be *added* as a new mixin
var KnightBehavior = {
  defend: fn()
    print(this.name + " raises a mighty shield to defend!")
}

var player = {
  name: "Adventurer",
  health: 50,
  inventory: ["Sword", "Potion"],
  greet: fn() {
    print("Hello, I'm " + this.name)
  }
}

// -----------------------------------------------------------------------------
// 4) Create a player object using colon-syntax + initial mixin references
//    Demonstrate indentation style, plus a portion with braces
// -----------------------------------------------------------------------------
var player = {
  :[MagicalBeing, InventorySystem]  // Mix in MagicalBeing & InventorySystem
  name: "Adventurer"
  health: 50
  inventory: ["Sword", "Potion"]

  greet: fn()
    print("Hello, I'm " + this.name)

  // (A) Event-bound function: triggers on "NightAlarm" if isNightTime
  //     Chained filters => .filter("all").filter("name(Adventurer)")
  nightAlert: fn() <- [ "NightAlarm" { if isNightTime }.filter("all").filter("name(Adventurer)") ]
    // Using braces here for readability 
    {
      print("Player " + this.name + " reacts to the NightAlarm! It's dark!")
      if monsterCount > 0
        print("...and monsters are around to make it worse!")
      el
        print("No monsters in sight, but still spooky outside...")
    }

  // (B) Another event-bound function for "MonsterAlert"
  //     Only triggers if monsterCount > 0, with a single filter "ofType(player)"
  monsterAlert: fn() <- [ "MonsterAlert" {
      if monsterCount > 0 {
        print("Player sees monsterCount=" + monsterCount + ", so monsterAlert triggers.")
      }
    }.filter("ofType(player)") ]
  {
    print("Player " + this.name + " readies for battle against monsters!")
  }
}

// A second object (townGuard) that also binds to the "NightAlarm" event
// Indentation-based function block:
var townGuard = {
  name: "Town Guard"

  respondAtNight: fn() <- [ "NightAlarm" { if isNightTime }.filter("guards") ]
    print("Guard " + this.name + " lights torches around the town!")
}

// A free-floating event-bound function, triggered by "MonsterAlert" for all
monsterAlertGlobal: fn() <- [ "MonsterAlert".filter("all") ]
  print("A global event function: 'MonsterAlert' => entire region is on alert!")


// -----------------------------------------------------------------------------
// Basic usage with the existing mixins
// -----------------------------------------------------------------------------
player.greet()
player.checkInventory()
player.castSpell("Arcane Bolt")


// -----------------------------------------------------------------------------
// 5) Further demonstration of creation vs. assignment
// -----------------------------------------------------------------------------
var gold: 5
print("Gold initially => " + gold)

gold = 12
print("Gold after reassignment => " + gold)


// -----------------------------------------------------------------------------
// 6) Show reassigning the first mixin of 'player' to something else
//    (index 0 was originally MagicalBeing)
// -----------------------------------------------------------------------------
player[0] = Explorer
player.explore()  // Now 'player' no longer has castSpell, but does have Explorer.explore


// -----------------------------------------------------------------------------
// 7) Add a brand new mixin at the next slot via '+:' operator
//    We had indexes [0]=Explorer, [1]=InventorySystem. Next slot is index=2.
// -----------------------------------------------------------------------------
player +: KnightBehavior
player.defend()  // from KnightBehavior


// -----------------------------------------------------------------------------
// 8) A “covered” iterator with break-out and filter
//    Collect squares of even numbers from 1..10, but stop if >= 8
// -----------------------------------------------------------------------------
let evenSquares = [
  (n*n): n: 1 to 11 {
    print("Visiting => " + n)
    if (n >= 8) {
      print("Reached 8 -> break!")
      break
    }
  }
  if (n % 2 == 0)  // filter out odd numbers
]
print("Collected even squares until 8 => " + evenSquares)


// -----------------------------------------------------------------------------
// 9) A “naked” iterator for side effects only (indentation-based block)
// -----------------------------------------------------------------------------
i: 0 to 3
  print("Day " + i + " => Foraging around camp...")


// -----------------------------------------------------------------------------
// 10) Demonstrate table assignment
// -----------------------------------------------------------------------------
var dayInfo = {
  weather: "sunny"
}

var secondDay = {
  weather: "rainy",
  event: "Found hidden treasure"
}

print("Day #1 => weather=" + dayInfo.weather)
dayInfo = secondDay
print("Now dayInfo => weather=" + dayInfo.weather + ", event=" + dayInfo.event)


// -----------------------------------------------------------------------------
// 11) Another “covered” iterator used purely for side effects on `player.health`
// -----------------------------------------------------------------------------
[
  step: 1 to 5 {
    player.health -= 10
    print("Step " + step + " => " + player.name + " has " + player.health + " HP")
    if (player.health <= 0) {
      print(player.name + " collapsed!")
      break
    }
  }
]


// -----------------------------------------------------------------------------
// 12) Demonstrate event *invocation* as a free-standing function
// -----------------------------------------------------------------------------
beginNight: fn()
  isNightTime = true
  print("[BEGIN NIGHT] isNightTime set to true.")

  // Now invoke the "NightAlarm" event with a condition block + extra filters
  ()->["NightAlarm" { if isNightTime }].filter("region(Town)").filter("someGroup")
    print("[BEGIN NIGHT] Broadcasting NightAlarm in 'Town' for 'someGroup'!")


monstersApproach: fn()
  print("Monsters are near! monsterCount => " + monsterCount)

  // Invoke "MonsterAlert" with a condition block + filter
  ()->["MonsterAlert" { if monsterCount > 0 }].filter("all") {
    print("[MONSTER ALERT] There is at least one monster nearby!")
  }


// -----------------------------------------------------------------------------
// Putting it all together
// -----------------------------------------------------------------------------
print("=== Start of extended event usage ===")
beginNight()       // triggers "NightAlarm" => player.nightAlert & townGuard.respondAtNight 
monstersApproach() // triggers "MonsterAlert" => calls 'monsterAlert' on player + global function

print("[Decreasing monsterCount to 0 and trying again]")
monsterCount = 0
monstersApproach() // won't trigger player's monsterAlert because condition block checks monsterCount > 0


// -----------------------------------------------------------------------------
// 13) Demonstrate an async + coroutine function using <fn()> + `be` + `yield`
// -----------------------------------------------------------------------------
getData: <fn()>:
  be res: network.httpGet("https://example.com/endpointA")
  print("Response A => " + res)

  yield  // suspend the coroutine here (the function returns control to the runtime)
  print("Resuming getData after yield...")

  res = network.httpGet("https://example.com/endpointB")
  print("Response B => " + res)

// Call it:
print("=== Testing async + coroutine getData() ===")
getData()
print("Back from getData() — note that inside the function, we used `yield` so it might be resumed later...")


// -----------------------------------------------------------------------------
// 14) Show usage of `let` vs `var` for functions and variables
// -----------------------------------------------------------------------------

// 'let' is constant, meaning it cannot re-bind or reassign the name. 
// e.g. you can't do 'testFunc = somethingElse' if it was declared let. 
// You can also interpret 'let' as "this function won't mutate the containing object," 
// if you want that semantic. (Implementation may vary.)

let testFunc: fn()
  print("I am an immutable reference function. I can't be re-bound to anything else.")

// Another function defaulting to var (since we omitted the keyword):
anotherTest: fn()
  print("Hello from 'anotherTest' - we can reassign or remove this if we want.")

// A variable declared with let => cannot be reassigned
let maxLives: 3

// A variable declared with var => can be reassigned
var currentLives: maxLives
currentLives -= 1
print("After losing one life => currentLives = " + currentLives)


// End
print("=== End of future_syntax.ember ===")
