// EmberScript Nested Property VM Test
// Tests the improved VM implementation for nested property assignments

print("==== Nested Property VM Test ====");

// Create test objects with different structure
var obj1 = {
    x: {
        y: "initial value 1"
    }
};

var obj2 = {
    data: {
        value: "initial value 2",
        meta: {
            updated: false
        }
    }
};

var obj3 = {
    name: "Object 3",
    props: {
        inner: {
            test: "initial value 3"
        }
    }
};

// Test 1: Basic nested property update using our workaround
print("\n--- Test 1: Basic nested update ---");
print("Before: obj1.x.y = " + obj1.x.y);

var inner1 = obj1.x;  // Get inner object
inner1.y = "updated value 1";  // Modify it
obj1.x = inner1;  // Set it back

print("After: obj1.x.y = " + obj1.x.y);

// Test 2: 2-level deep property
print("\n--- Test 2: 2-level deep update ---");
print("Before: obj2.data.value = " + obj2.data.value);

var data = obj2.data;
data.value = "updated value 2";
obj2.data = data;

print("After: obj2.data.value = " + obj2.data.value);

// Test 3: 3-level deep property
print("\n--- Test 3: 3-level deep update ---");
print("Before: obj3.props.inner.test = " + obj3.props.inner.test);

// For deeply nested updates, we go level by level
var props = obj3.props;
var inner3 = props.inner;
inner3.test = "updated value 3";
props.inner = inner3;
obj3.props = props;

print("After: obj3.props.inner.test = " + obj3.props.inner.test);

print("\n==== All tests completed ===="); 